/**
 * mrf24j.cpp, Karl Palsson, 2011, karlp@tweak.net.au
 * modified bsd license / apache license
 */

#include "RF/mrf24j.h"
#include <stddef.h>
#include <stdio.h>
#include <xil_io.h>
#include <xil_types.h>
#include <xspi.h>		/* SPI device driver */
#include <xspi_l.h>
#include <xstatus.h>
#include <xgpio.h>
#include <xscugic.h>
#include "sleep.h"

// aMaxPHYPacketSize = 127, from the 802.15.4-2006 standard.
static uint8_t rx_buf[127];

/// essential for obtaining the data frame only
// bytes_MHR = 2 Frame control + 1 sequence number + 2 panid + 2 shortAddr Destination + 2 shortAddr Source
static int bytes_MHR = 9;
static int bytes_FCS = 2; // FCS length = 2
static int bytes_nodata = bytes_MHR + bytes_FCS; // no_data bytes in PHY payload,  header length + FCS

static int ignoreBytes = 0; // bytes to ignore, some modules behaviour.

static bool bufPHY = false; // flag to buffer all uint8_ts in PHY Payload, or not

volatile uint8_t flag_got_rx;
volatile uint8_t flag_got_tx;

static rx_info_t rx_info;
static tx_info_t tx_info;

static XSpi MSpiInstance;

static XGpio gpioInstance;

static XScuGic gicInstance;


#define RF_INTERRUPT_MASK	0x1	//TODO: assign mask values; input, not needed
#define RF_RESET_MASK		0x2
#define RF_WAKE_MASK		0x4

bool dataRec = false;

extern Mrf24j RF;
extern XSpi SpiInstance;

static void gpioInterruptHandler(void *CallBackRef)
{
	XSpi_Disable()
	XGpio_InterruptDisable(&gpioInstance, XGPIO_IR_CH1_MASK);
	XGpio *gpio = (XGpio *) CallBackRef;
	int status = XGpio_InterruptGetStatus(gpio);
	if( status & XGPIO_IR_CH1_MASK )
	{
		XGpio_InterruptClear(&gpioInstance, XGPIO_IR_CH1_MASK);
		int gpioReg = XGpio_DiscreteRead(&gpioInstance, 1);
		if((gpioReg & RF_INTERRUPT_MASK) == 1)
			//dataRec = true;
			RF.interrupt_handler();
	}
	XGpio_InterruptEnable(&gpioInstance, XGPIO_IR_CH1_MASK);

}

/**
 * Constructor MRF24J Object.
 * @param pin_reset, @param pin_chip_select, @param pin_interrupt
 */
Mrf24j::Mrf24j() 
{

}

bool Mrf24j::checkIntFlag()
{
	int gpioReg = XGpio_DiscreteRead(&gpioInstance, 1);

	//if((gpioReg & RF_INTERRUPT_MASK) == 1)
		//RF.interrupt_handler();
	if(dataRec)
	{
		RF.interrupt_handler();
		dataRec = false;
	}

	return false;
}

int Mrf24j::initDrivers(void)
{
	// TODO: check pin direction
	/*pinMode(_pin_reset, OUTPUT);
	pinMode(_pin_cs, OUTPUT);
	pinMode(_pin_int, INPUT);*/

	XSpi_Config *SPIConfigPtr;
	XGpio_Config *GPIOConfigPtr;

	int status;

	/*
	* Initialize the SPI driver so that it is  ready to use.
	*/
	SPIConfigPtr = XSpi_LookupConfig(XPAR_SPI_0_DEVICE_ID);
	if (SPIConfigPtr == NULL)
	{
		return XST_DEVICE_NOT_FOUND;
	}

	status = XSpi_CfgInitialize(&MSpiInstance, SPIConfigPtr, SPIConfigPtr->BaseAddress);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	/*
	 * Set the Spi device as a master.
	 */
	status = XSpi_SetOptions( &MSpiInstance, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION ); //TO DO, add msb first config
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	/*
	* Start the SPI driver so that the device is enabled.
	*/
	XSpi_Start(&MSpiInstance);

	/*
	* Disable Global interrupt to use polled mode operation
	*/
	XSpi_IntrGlobalDisable(&MSpiInstance);

	//GPIO config
	GPIOConfigPtr = XGpio_LookupConfig(XPAR_GPIO_1_DEVICE_ID);

	status = XGpio_CfgInitialize(&gpioInstance, GPIOConfigPtr, GPIOConfigPtr->BaseAddress);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&gpioInstance, 1, 0x1); //check data direction

	XGpio_DiscreteWrite(&gpioInstance, 1, 0x6); //check register, check wake pin if it is ok high


	//for(int i = 0; i < 20; i++)
	//{
	//u32 intr = XGpio_InterruptGetEnabled(&gpioInstance);

	//u32 sts = XGpio_InterruptGetStatus(&gpioInstance);

	//XGpio_InterruptClear(&gpioInstance, XGPIO_IR_CH1_MASK);

	 ///sts = XGpio_InterruptGetStatus(&gpioInstance);

	//u32 usts = sts;
	//}
	/*SPI.setBitOrder(MSBFIRST) ;
	SPI.setDataMode(SPI_MODE0);
	SPI.begin();*/
	return XST_SUCCESS;
}

void Mrf24j::reset(void) 
{
	int gpioReg = 0;
	
	gpioReg = XGpio_DiscreteRead(&gpioInstance, 1);
	XGpio_DiscreteWrite(&gpioInstance, 1, gpioReg & RF_WAKE_MASK); //reset low
    usleep(10000);  // just my gut
    XGpio_DiscreteWrite(&gpioInstance, 1, gpioReg | RF_RESET_MASK); //reset high
    usleep(20000);  // from manual
}

uint8_t Mrf24j::read_short(uint8_t address)
{
	uint8_t rgbRx = 0;
	uint8_t rgbTx = address<<1 & 0b01111110;
    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x00);

    MSpiInstance.IsStarted = XIL_COMPONENT_IS_STARTED;
    MSpiInstance.SlaveSelectReg = 0;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) ); //transmit address
	rgbTx = 0;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) ); //receive data

    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x01);
    return rgbRx;
}

uint8_t Mrf24j::read_long(word address) 
{
	uint8_t rgbRx = 0;
    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x00);
    MSpiInstance.SlaveSelectReg = 0;
    uint8_t ahigh = address >> 3;
    uint8_t alow = address << 5;
    uint8_t rgbTx = 0x80 | ahigh;
    MSpiInstance.IsStarted = XIL_COMPONENT_IS_STARTED;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) );
	XSpi_Transfer( &MSpiInstance, &alow, &rgbRx, sizeof(uint8_t) );
	rgbTx = 0;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) ); //receive data

    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x01);
    return rgbRx;
}


void Mrf24j::write_short(uint8_t address, uint8_t data)
{
	uint8_t rgbRx = 0;
	uint8_t rgbTx = (address<<1 & 0b01111110) | 0x01;

    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x00);
    MSpiInstance.SlaveSelectReg = 0;
    MSpiInstance.IsStarted = XIL_COMPONENT_IS_STARTED;
    // 0 for top short address, 1 bottom for write
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) );
    int status = XSpi_Transfer( &MSpiInstance, &data, &rgbRx, sizeof(uint8_t) );
    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x01);
}

void Mrf24j::write_long(word address, uint8_t data) 
{
	uint8_t rgbRx = 0;
    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x00);
    MSpiInstance.SlaveSelectReg = 0;
    uint8_t ahigh = address >> 3;
    uint8_t alow = address << 5;
    uint8_t rgbTx =  0x80 | ahigh;
    MSpiInstance.IsStarted = XIL_COMPONENT_IS_STARTED;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) );	 // high bit for long
	rgbTx = alow | 0x10;
	XSpi_Transfer( &MSpiInstance, &rgbTx, &rgbRx, sizeof(uint8_t) ); 	 // last bit for write
	XSpi_Transfer( &MSpiInstance, &data, &rgbRx, sizeof(uint8_t) ); 			 //write data

    XSpi_SetSlaveSelectReg(&MSpiInstance, 0x01);
}

word Mrf24j::get_pan(void) {
    uint8_t panh = read_short(MRF_PANIDH);
    return panh << 8 | read_short(MRF_PANIDL);
}

void Mrf24j::set_pan(word panid) {
    write_short(MRF_PANIDH, panid >> 8);
    write_short(MRF_PANIDL, panid & 0xff);
}

void Mrf24j::address16_write(word address16) {
    write_short(MRF_SADRH, address16 >> 8);
    write_short(MRF_SADRL, address16 & 0xff);
}

word Mrf24j::address16_read(void) {
    uint8_t a16h = read_short(MRF_SADRH);
    return a16h << 8 | read_short(MRF_SADRL);
}

/**
 * Simple send 16, with acks, not much of anything.. assumes src16 and local pan only.
 * @param data
 */
void Mrf24j::send16(word dest16, char * data) {
    uint8_t len = strlen(data); // get the length of the char* array
    int i = 0;
    write_long(i++, bytes_MHR); // header length
    // +ignoreuint8_ts is because some module seems to ignore 2 uint8_ts after the header?!.
    // default: ignoreuint8_ts = 0;
    write_long(i++, bytes_MHR+ignoreBytes+len);

    // 0 | pan compression | ack | no security | no data pending | data frame[3 bits]
    write_long(i++, 0b01100001); // first uint8_t of Frame Control
    // 16 bit source, 802.15.4 (2003), 16 bit dest,
    write_long(i++, 0b10001000); // second uint8_t of frame control
    write_long(i++, 1);  // sequence number 1

    word panid = get_pan();

    write_long(i++, panid & 0xff);  // dest panid
    write_long(i++, panid >> 8);
    write_long(i++, dest16 & 0xff);  // dest16 low
    write_long(i++, dest16 >> 8); // dest16 high

    word src16 = address16_read();
    write_long(i++, src16 & 0xff); // src16 low
    write_long(i++, src16 >> 8); // src16 high

    // All testing seems to indicate that the next two uint8_ts are ignored.
    //2 uint8_ts on FCS appended by TXMAC
    i+=ignoreBytes;
    for (int q = 0; q < len; q++) {
        write_long(i++, data[q]);
    }
    // ack on, and go!
    write_short(MRF_TXNCON, (1<<MRF_TXNACKREQ | 1<<MRF_TXNTRIG));
}

void Mrf24j::set_interrupts(void) {
    // interrupts for rx and tx normal complete
    write_short(MRF_INTCON, 0b11110110);
}

/** use the 802.15.4 channel numbers..
 */
void Mrf24j::set_channel(uint8_t channel) {
    write_long(MRF_RFCON0, (((channel - 11) << 4) | 0x03));
}

void Mrf24j::init(void) {
    /*
    // Seems a bit ridiculous when I use reset pin anyway
    write_short(MRF_SOFTRST, 0x7); // from manual
    while (read_short(MRF_SOFTRST) & 0x7 != 0) {
        ; // wait for soft reset to finish
    }
    */

	XScuGic_Config *GicConfigPtr;
    write_short(MRF_PACON2, 0x98); // – Initialize FIFOEN = 1 and TXONTS = 0x6.
    write_short(MRF_TXSTBL, 0x95); // – Initialize RFSTBL = 0x9.

    write_long(MRF_RFCON0, 0x03); // – Initialize RFOPT = 0x03.
    write_long(MRF_RFCON1, 0x01); // – Initialize VCOOPT = 0x02.
    write_long(MRF_RFCON2, 0x80); // – Enable PLL (PLLEN = 1).
    write_long(MRF_RFCON6, 0x90); // – Initialize TXFIL = 1 and 20MRECVR = 1.
    write_long(MRF_RFCON7, 0x80); // – Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator).
    write_long(MRF_RFCON8, 0x10); // – Initialize RFVCO = 1.
    write_long(MRF_SLPCON1, 0x21); // – Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01.
    write_long(MRF_SLPCON0, 0x02);
    uint8_t regi = read_long(MRF_SLPCON0);

    //  Configuration for nonbeacon-enabled devices (see Section 3.8 “Beacon-Enabled and
    //  Nonbeacon-Enabled Networks”):
    write_short(MRF_BBREG2, 0x80); // Set CCA mode to ED
    write_short(MRF_CCAEDTH, 0x60); // – Set CCA ED threshold.
    write_short(MRF_BBREG6, 0x40); // – Set appended RSSI value to RXFIFO.
    set_interrupts();
    set_channel(12);
    // max power is by default.. just leave it...
    // Set transmitter power - See “REGISTER 2-62: RF CONTROL 3 REGISTER (ADDRESS: 0x203)”.
    write_short(MRF_RFCTL, 0x04); //  – Reset RF state machine.
    write_short(MRF_RFCTL, 0x00); // part 2
    usleep(1000); // delay at least 192usec

    GicConfigPtr = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    	if (GicConfigPtr == NULL)
    	{
    		//return XST_DEVICE_NOT_FOUND;
    	}

    	int status = XScuGic_CfgInitialize(&gicInstance, GicConfigPtr, GicConfigPtr->CpuBaseAddress);
    	if (status != XST_SUCCESS)
    	{
    		//return XST_FAILURE;
    	}

    	Xil_ExceptionInit();

    	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
    	(Xil_ExceptionHandler)XScuGic_InterruptHandler, &gicInstance);

    	XScuGic_Connect(&gicInstance, XPAR_FABRIC_AXI_GPIO_1_IP2INTC_IRPT_INTR,
    	(Xil_ExceptionHandler)gpioInterruptHandler, (void *)&gpioInstance);

    	XScuGic_Enable(&gicInstance, XPAR_FABRIC_AXI_GPIO_1_IP2INTC_IRPT_INTR);

    	XGpio_InterruptGlobalEnable(&gpioInstance);

    	XGpio_InterruptEnable(&gpioInstance, XGPIO_IR_CH1_MASK);

    	//

    	Xil_ExceptionEnable();
}

/**
 * Call this from within an interrupt handler connected to the MRFs output
 * interrupt pin.  It handles reading in any data from the module, and letting it
 * continue working.
 * Only the most recent data is ever kept.3\
 *
 */
void Mrf24j::interrupt_handler(void) {
    uint8_t last_interrupt = read_short(MRF_INTSTAT);
    if (last_interrupt & MRF_I_RXIF) {
        flag_got_rx++;
        // read out the packet data...
        //noInterrupts(); //TODO INTERRUPTS
        rx_disable();
        // read start of rxfifo for, has 2 uint8_ts more added by FCS. frame_length = m + n + 2
        uint8_t frame_length = read_long(0x300);
        rx_info.frame_length = frame_length;

        xil_printf("frame_length: %d\n", frame_length);

        // buffer all uint8_ts in PHY Payload
        if(bufPHY){
            int rb_ptr = 0;
            for (int i = 0; i < frame_length; i++) { // from 0x301 to (0x301 + frame_length -1)
                rx_buf[rb_ptr++] = read_long(0x301 + i);
                xil_printf("%d, ", rx_buf[rb_ptr - 1]);
            }
        }
        xil_printf("\n rx data:");
        // buffer data uint8_ts
        int rd_ptr = 0;
        // from (0x301 + uint8_ts_MHR) to (0x301 + frame_length - uint8_ts_nodata - 1)
        for (int i = 0; i < rx_datalength(); i++) {
            rx_info.rx_data[rd_ptr++] = read_long(0x301 + bytes_MHR + i);
            xil_printf("%d, ", rx_info.rx_data[rd_ptr - 1]);
        }

        // same as datasheet 0x301 + (m + n + 2) <-- frame_length
        rx_info.lqi = read_long(0x301 + frame_length);
        // same as datasheet 0x301 + (m + n + 3) <-- frame_length + 1
        rx_info.rssi = read_long(0x301 + frame_length + 1);
        m_rxCallback();
        rx_enable();
        //interrupts(); //TODO enable interrupts
    }
    if (last_interrupt & MRF_I_TXNIF) {
        flag_got_tx++;
        uint8_t tmp = read_short(MRF_TXSTAT);
        // 1 means it failed, we want 1 to mean it worked.
        tx_info.tx_ok = !(tmp & ~(1 << TXNSTAT));
        tx_info.retries = tmp >> 6;
        tx_info.channel_busy = (tmp & (1 << CCAFAIL));
    }
}

bool Mrf24j::registerRXCallback(RXCallback callback)
{
	bool result = false;
	if(callback != 0)
	{
		m_rxCallback = callback;
		result = true;
	}
	else
	{
		printf("Mrf24j::registerRXCallback ERROR NULL callback");
	}

	return result;
}


/**
 * Call this function periodically, it will invoke your nominated handlers
 */
void Mrf24j::check_flags(void (*rx_handler)(void), void (*tx_handler)(void)){
    // TODO - we could check whether the flags are > 1 here, indicating data was lost?
    if (flag_got_rx) 
	{
        flag_got_rx = 0;
        rx_handler();
    }
    if (flag_got_tx) 
	{
        flag_got_tx = 0;
        tx_handler();
    }
}

/**
 * Set RX mode to promiscuous, or normal
 */
void Mrf24j::set_promiscuous(bool enabled) {
    if (enabled) {
        write_short(MRF_RXMCR, 0x01);
    } else {
        write_short(MRF_RXMCR, 0x00);
    }
}

rx_info_t * Mrf24j::get_rxinfo(int &dataLen) {
	dataLen = rx_info.frame_length - bytes_nodata;
    return &rx_info;
}

tx_info_t * Mrf24j::get_txinfo(void) {
    return &tx_info;
}

uint8_t * Mrf24j::get_rxbuf(void) {
    return rx_buf;
}

int Mrf24j::rx_datalength(void) {
    return rx_info.frame_length - bytes_nodata;
}

void Mrf24j::set_ignoreuint8_ts(int ib) {
    // some modules behaviour
	ignoreBytes = ib;
}

/**
 * Set bufPHY flag to buffer all uint8_ts in PHY Payload, or not
 */
void Mrf24j::set_bufferPHY(bool bp) {
    bufPHY = bp;
}

bool Mrf24j::get_bufferPHY(void) {
    return bufPHY;
}

/**
 * Set PA/LNA external control
 */
void Mrf24j::set_palna(bool enabled) {
    if (enabled) {
        write_long(MRF_TESTMODE, 0x07); // Enable PA/LNA on MRF24J40MB module.
    }else{
        write_long(MRF_TESTMODE, 0x00); // Disable PA/LNA on MRF24J40MB module.
    }
}

void Mrf24j::rx_flush(void) {
    write_short(MRF_RXFLUSH, 0x01);
}

void Mrf24j::rx_disable(void) {
    write_short(MRF_BBREG1, 0x04);  // RXDECINV - disable receiver
}

void Mrf24j::rx_enable(void) {
    write_short(MRF_BBREG1, 0x00);  // RXDECINV - enable receiver
}
