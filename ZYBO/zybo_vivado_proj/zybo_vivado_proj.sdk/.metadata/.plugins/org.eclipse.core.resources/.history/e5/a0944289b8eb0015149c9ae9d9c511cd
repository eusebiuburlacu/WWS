/*****************************************************************************/
/**
* @file main.cc
*
* This is the entry point for WWS application
*
* @note
*
* None.
*
*<pre>
* MODIFICATION HISTORY:
*
*  Who  		Date     Changes
*  --------		---------- ---------------------------------------------------------
*  LucianB 	22/02/2016 Created
*
******************************************************************************/

/***************************** Include Files *********************************/

#include <stddef.h>
#include "xil_printf.h"
#include <xstatus.h>
#include "sleep.h"
#include "OLED/OLED.h"
#include "RF/mrf24j.h"
#include <iostream>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include "Screen/ScreenInterface.h"
#include "Screen/Screens.h"
#include "xparameters.h"
#include <xgpio.h>
#include <xscugic.h>

/************************** Object Definitions *****************************/
OledClass OLED;
Mrf24j RF;
static XGpio bGpioInstance;

extern XScuGic gicInstance;

/*****************************************************************************/
/**
*
* Main function to call the Spi Polled example.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/

using namespace std;

typedef enum
{
	RF_MESSAGE_IMPEDANCE = 1,
	RF_MESSAGE_PHASE,
	RF_MESSAGE_TEMPERATURE,
	RF_MESSAGE_HUMIDITY,
	RF_MESSAGE_BATTERY
} RF_MESSAGE_TYPES;

vector<float> impedanceArray;
vector<float> phaseArray;
vector<IScreen*> screens;

float temperature;
unsigned char humidity;
float batteryVoltage;
bool impedanceUpdated = false;
int currentScreen;

int initButtonsGpio();
void bgpioInterruptHandler(void *CallBackRef);

void rxCallback()
{
	int dataLen;
	rx_info_t *RXInfo =  RF.get_rxinfo(dataLen);
	dataLen--;

	int i = 0;

	RF_MESSAGE_TYPES msgType = (RF_MESSAGE_TYPES)RXInfo->rx_data[i++];

	switch( msgType )
	{
		case RF_MESSAGE_IMPEDANCE:
		{
			xil_printf("RF_MESSAGE_IMPEDANCE\n");
			impedanceUpdated = true;
			for(; i < dataLen; i+=4)
			{
				float val;
				uint8_t *valPtr = (uint8_t*)(void *)&val;
				*valPtr++ = RXInfo->rx_data[i];
				*valPtr++ = RXInfo->rx_data[i+1];
				*valPtr++ = RXInfo->rx_data[i+2];
				*valPtr++ = RXInfo->rx_data[i+3];
				if(impedanceArray.size() >= 128 )
				{
					impedanceArray.erase(impedanceArray.begin());
				}
				impedanceArray.push_back(val);
				char data[5];
				sprintf(data, "%.2f\n", val);
				xil_printf("%s", data);
			}

			break;
		}
		case RF_MESSAGE_PHASE:
		{
			xil_printf("RF_MESSAGE_PHASE\n");
			for(; i < dataLen; i+=4)
			{
				float val;
				uint8_t *valPtr = (uint8_t*)(void *)&val;
				*valPtr++ = RXInfo->rx_data[i];
				*valPtr++ = RXInfo->rx_data[i+1];
				*valPtr++ = RXInfo->rx_data[i+2];
				*valPtr = RXInfo->rx_data[i+3];
				impedanceArray.push_back(val);
				char data[5];
				sprintf(data, "%.2f\n", val);
				xil_printf("%s", data);
			}

			break;
		}
		case RF_MESSAGE_TEMPERATURE:
		{
			xil_printf("RF_MESSAGE_TEMPERATURE\n");
			uint8_t *valPtr = (uint8_t*)(void *)&temperature;
			*valPtr++ = RXInfo->rx_data[1];
			*valPtr++ = RXInfo->rx_data[2];
			*valPtr++ = RXInfo->rx_data[3];
			*valPtr = RXInfo->rx_data[4];
			char data[5];
			sprintf(data, "%.2f\n", temperature);
			xil_printf("%s", data);
			break;
		}
		case RF_MESSAGE_HUMIDITY:
		{
			xil_printf("RF_MESSAGE_HUMIDITY\n");
			humidity = RXInfo->rx_data[1];
			xil_printf("%d\n", humidity);
			break;
		}
		case RF_MESSAGE_BATTERY:
		{
			xil_printf("RF_MESSAGE_BATTERY\n");
			uint8_t *valPtr = (uint8_t*)(void *)&batteryVoltage;
			*valPtr++ = RXInfo->rx_data[1];
			*valPtr++ = RXInfo->rx_data[2];
			*valPtr++ = RXInfo->rx_data[3];
			*valPtr = RXInfo->rx_data[4];
			char data[5];
			sprintf(data, "%.2f\n", batteryVoltage);
			xil_printf("%s", data);
			break;
		}
		default:
		{
			xil_printf("ERROR: Invalid msg type");
			break;
		}
	}
}

int main(void)
{
	xil_printf("Start\n");
	RF.initDrivers();
	xil_printf("initDrivers\n");
	RF.reset();
	xil_printf("reset\n");
	RF.init();
	xil_printf("init\n");
	RF.set_pan(0xcafe);
	xil_printf("set_pan\n");
	RF.registerRXCallback(rxCallback);
	xil_printf("registerRXCallback\n");
	RF.address16_write(0x4202);
	xil_printf("address16_write\n");
	OLED.begin();
	xil_printf("begin\n");

	currentScreen = 0;

	initButtonsGpio();

	screens = getMenuScreens();

	while(1)

	{
		RF.checkIntFlag();
		//Clear the virtual buffer
		OLED.clearBuffer();
		
		//Chosing Fill pattern 0
		OLED.setFillPattern(OLED.getStdPattern(0));
		//Turn automatic updating off
		OLED.setCharUpdate(0);
		usleep(100000);
		RF.checkIntFlag();

		//draw impedance chart
		OLED.clearBuffer();
		screens[0]->printData();

	}
	
	return XST_SUCCESS;
}

volatile int gpioReg = 0;
#define UP_BTN_MASK		 0X01
#define DOWN_BTN_MASK	 0X02
#define BACK_BTN_MASK 	 0X04
#define ENTER_BTN_MASK 	 0X08

void bgpioInterruptHandler(void *CallBackRef)
{
	/*XGpio_InterruptDisable(&bGpioInstance, XGPIO_IR_CH1_MASK);
	XGpio *gpio = (XGpio *) CallBackRef;
	int status = XGpio_InterruptGetStatus(gpio);
	if( status & XGPIO_IR_CH1_MASK )
	{
		XGpio_InterruptClear(&bGpioInstance, XGPIO_IR_CH1_MASK);
		int gpioReg = XGpio_DiscreteRead(&bGpioInstance, 1);
		if((gpioReg & 0x01) == 1)
			bool dataRec = true;
	}
	XGpio_InterruptEnable(&bGpioInstance, XGPIO_IR_CH1_MASK);*/
	XGpio_InterruptClear(&bGpioInstance, XGPIO_IR_CH1_MASK);
	gpioReg = XGpio_DiscreteRead(&bGpioInstance, 1);

	if(gpioReg & UP_BTN_MASK)
	{
		if(currentScreen > screens.size())
	}
	else if(gpioReg & DOWN_BTN_MASK)
	{

	}
	else if(gpioReg & BACK_BTN_MASK)
	{

	}
	else if(gpioReg & ENTER_BTN_MASK)
	{

	}

}

int initButtonsGpio()
{

	//XScuGic_Config *GicConfigPtr;
	XGpio_Config *GPIOConfigPtr;
	int status;
	//GPIO config
	GPIOConfigPtr = XGpio_LookupConfig(XPAR_AXI_GPIO_2_DEVICE_ID);

	status = XGpio_CfgInitialize(&bGpioInstance, GPIOConfigPtr, GPIOConfigPtr->BaseAddress);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&bGpioInstance, 1, 0x0F); //check data direction

	 //GicConfigPtr = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	//if (GicConfigPtr == NULL)
	//{
		//return XST_DEVICE_NOT_FOUND;
	//}

	//status = XScuGic_CfgInitialize(&bGicInstance, GicConfigPtr, GicConfigPtr->CpuBaseAddress);
   	//if (status != XST_SUCCESS)
   	//{
   		//return XST_FAILURE;
   	//}

   	//Xil_ExceptionInit();

   	//Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
   	//(Xil_ExceptionHandler)XScuGic_InterruptHandler, &bGicInstance);
   	Xil_ExceptionDisable();

   	XScuGic_Connect(&gicInstance, XPAR_FABRIC_AXI_GPIO_2_IP2INTC_IRPT_INTR,
   			(Xil_ExceptionHandler)bgpioInterruptHandler, (void *)&bGpioInstance);

	XScuGic_Enable(&gicInstance, XPAR_FABRIC_AXI_GPIO_2_IP2INTC_IRPT_INTR);

   	XGpio_InterruptGlobalEnable(&bGpioInstance);

   	XGpio_InterruptEnable(&bGpioInstance, XGPIO_IR_CH1_MASK);

   	Xil_ExceptionEnable();

   	return 0;
}
